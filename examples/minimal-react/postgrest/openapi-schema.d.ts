/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** OpenAPI description (this document) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/todos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    id?: components["parameters"]["rowFilter.todos.id"];
                    done?: components["parameters"]["rowFilter.todos.done"];
                    task?: components["parameters"]["rowFilter.todos.task"];
                    due?: components["parameters"]["rowFilter.todos.due"];
                    /** @description Filtering Columns */
                    select?: components["parameters"]["select"];
                    /** @description Ordering */
                    order?: components["parameters"]["order"];
                    /** @description Limiting and Pagination */
                    offset?: components["parameters"]["offset"];
                    /** @description Limiting and Pagination */
                    limit?: components["parameters"]["limit"];
                };
                header?: {
                    /** @description Limiting and Pagination */
                    Range?: components["parameters"]["range"];
                    /** @description Limiting and Pagination */
                    "Range-Unit"?: components["parameters"]["rangeUnit"];
                    /** @description Preference */
                    Prefer?: components["parameters"]["preferCount"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["todos"][];
                        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["todos"][];
                        "application/vnd.pgrst.object+json": components["schemas"]["todos"][];
                        "text/csv": components["schemas"]["todos"][];
                    };
                };
                /** @description Partial Content */
                206: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: {
                    /** @description Filtering Columns */
                    select?: components["parameters"]["select"];
                };
                header?: {
                    /** @description Preference */
                    Prefer?: components["parameters"]["preferPost"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["todos"];
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete: {
            parameters: {
                query?: {
                    id?: components["parameters"]["rowFilter.todos.id"];
                    done?: components["parameters"]["rowFilter.todos.done"];
                    task?: components["parameters"]["rowFilter.todos.task"];
                    due?: components["parameters"]["rowFilter.todos.due"];
                };
                header?: {
                    /** @description Preference */
                    Prefer?: components["parameters"]["preferReturn"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: {
                    id?: components["parameters"]["rowFilter.todos.id"];
                    done?: components["parameters"]["rowFilter.todos.done"];
                    task?: components["parameters"]["rowFilter.todos.task"];
                    due?: components["parameters"]["rowFilter.todos.due"];
                };
                header?: {
                    /** @description Preference */
                    Prefer?: components["parameters"]["preferReturn"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["todos"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/rpc/update_todo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query: {
                    p_id: number;
                    p_task?: string;
                    p_done?: boolean;
                    p_due?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Preference */
                    Prefer?: components["parameters"]["preferParams"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** Format: boolean */
                        p_done?: boolean;
                        /** Format: timestamp with time zone */
                        p_due?: string;
                        /** Format: integer */
                        p_id: number;
                        /** Format: text */
                        p_task?: string;
                    };
                    "application/vnd.pgrst.object+json;nulls=stripped": {
                        /** Format: boolean */
                        p_done?: boolean;
                        /** Format: timestamp with time zone */
                        p_due?: string;
                        /** Format: integer */
                        p_id: number;
                        /** Format: text */
                        p_task?: string;
                    };
                    "application/vnd.pgrst.object+json": {
                        /** Format: boolean */
                        p_done?: boolean;
                        /** Format: timestamp with time zone */
                        p_due?: string;
                        /** Format: integer */
                        p_id: number;
                        /** Format: text */
                        p_task?: string;
                    };
                    "text/csv": {
                        /** Format: boolean */
                        p_done?: boolean;
                        /** Format: timestamp with time zone */
                        p_due?: string;
                        /** Format: integer */
                        p_id: number;
                        /** Format: text */
                        p_task?: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rpc/create_todo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query: {
                    p_task: string;
                    p_due?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Preference */
                    Prefer?: components["parameters"]["preferParams"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** Format: timestamp with time zone */
                        p_due?: string;
                        /** Format: text */
                        p_task: string;
                    };
                    "application/vnd.pgrst.object+json;nulls=stripped": {
                        /** Format: timestamp with time zone */
                        p_due?: string;
                        /** Format: text */
                        p_task: string;
                    };
                    "application/vnd.pgrst.object+json": {
                        /** Format: timestamp with time zone */
                        p_due?: string;
                        /** Format: text */
                        p_task: string;
                    };
                    "text/csv": {
                        /** Format: timestamp with time zone */
                        p_due?: string;
                        /** Format: text */
                        p_task: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rpc/read_todos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    p_limit?: number;
                    p_offset?: number;
                    p_sort_column?: string;
                    p_sort_order?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Preference */
                    Prefer?: components["parameters"]["preferParams"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** Format: integer */
                        p_limit?: number;
                        /** Format: integer */
                        p_offset?: number;
                        /** Format: text */
                        p_sort_column?: string;
                        /** Format: text */
                        p_sort_order?: string;
                    };
                    "application/vnd.pgrst.object+json;nulls=stripped": {
                        /** Format: integer */
                        p_limit?: number;
                        /** Format: integer */
                        p_offset?: number;
                        /** Format: text */
                        p_sort_column?: string;
                        /** Format: text */
                        p_sort_order?: string;
                    };
                    "application/vnd.pgrst.object+json": {
                        /** Format: integer */
                        p_limit?: number;
                        /** Format: integer */
                        p_offset?: number;
                        /** Format: text */
                        p_sort_column?: string;
                        /** Format: text */
                        p_sort_order?: string;
                    };
                    "text/csv": {
                        /** Format: integer */
                        p_limit?: number;
                        /** Format: integer */
                        p_offset?: number;
                        /** Format: text */
                        p_sort_column?: string;
                        /** Format: text */
                        p_sort_order?: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rpc/delete_todo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query: {
                    p_id: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Preference */
                    Prefer?: components["parameters"]["preferParams"];
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** Format: integer */
                        p_id: number;
                    };
                    "application/vnd.pgrst.object+json;nulls=stripped": {
                        /** Format: integer */
                        p_id: number;
                    };
                    "application/vnd.pgrst.object+json": {
                        /** Format: integer */
                        p_id: number;
                    };
                    "text/csv": {
                        /** Format: integer */
                        p_id: number;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        todos: {
            /**
             * Format: integer
             * @description Note:
             *     This is a Primary Key.<pk/>
             */
            id: number;
            /**
             * Format: boolean
             * @default false
             */
            done: boolean;
            /** Format: text */
            task: string;
            /** Format: timestamp with time zone */
            due?: string;
        };
    };
    responses: never;
    parameters: {
        /** @description Preference */
        preferParams: "params=single-object";
        /** @description Preference */
        preferReturn: "return=representation" | "return=minimal" | "return=none";
        /** @description Preference */
        preferCount: "count=none";
        /** @description Preference */
        preferPost: "return=representation" | "return=minimal" | "return=none" | "resolution=ignore-duplicates" | "resolution=merge-duplicates";
        /** @description Filtering Columns */
        select: string;
        /** @description On Conflict */
        on_conflict: string;
        /** @description Ordering */
        order: string;
        /** @description Limiting and Pagination */
        range: string;
        /** @description Limiting and Pagination */
        rangeUnit: string;
        /** @description Limiting and Pagination */
        offset: string;
        /** @description Limiting and Pagination */
        limit: string;
        "rowFilter.todos.id": string;
        "rowFilter.todos.done": string;
        "rowFilter.todos.task": string;
        "rowFilter.todos.due": string;
    };
    requestBodies: {
        /** @description todos */
        todos: {
            content: {
                "application/json": components["schemas"]["todos"];
                "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["todos"];
                "application/vnd.pgrst.object+json": components["schemas"]["todos"];
                "text/csv": components["schemas"]["todos"];
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
