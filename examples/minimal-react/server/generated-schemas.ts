/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./../postgrest/database.types";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const apiCreateTodoArgsSchemaSchema = z.object({
  p_due: z.string().optional(),
  p_task: z.string(),
});

export const apiCreateTodoReturnsSchemaSchema = z.array(z.unknown());

export const apiDeleteTodoArgsSchemaSchema = z.object({
  p_id: z.number(),
});

export const apiDeleteTodoReturnsSchemaSchema = z.array(z.unknown());

export const apiReadTodosArgsSchemaSchema = z.object({
  p_offset: z.number().optional(),
  p_sort_column: z.string().optional(),
  p_sort_order: z.string().optional(),
  p_limit: z.number().optional(),
});

export const apiReadTodosReturnsSchemaSchema = z.array(z.unknown());

export const apiUpdateTodoArgsSchemaSchema = z.object({
  p_due: z.string().optional(),
  p_task: z.string().optional(),
  p_id: z.number(),
  p_done: z.boolean().optional(),
});

export const apiUpdateTodoReturnsSchemaSchema = z.array(z.unknown());
